/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.b4nkd.experian.txnservices.api;

import java.math.BigDecimal;
import com.b4nkd.experian.txnservices.model.ErrorResponse;
import com.b4nkd.experian.txnservices.model.NullRequest;
import com.b4nkd.experian.txnservices.model.UFReport;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-15T11:00:50.772965300Z[Europe/London]")
@Api(value = "scores", description = "the scores API")
public interface ScoresApi {

    @ApiOperation(value = "Get UltraFICO Report", nickname = "getUltraFICOReport", notes = "Get a Report that has been generated by calling one of the Generate Report services. <br><br>The Report's status field will contain inProgress, failure, or success. Please wait at least 2 minutes for Report to finish generating.  ", response = UFReport.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "admin", description = "admin scope"),
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UFReport.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/scores/uf/consumers/{consumerID}/reports/{reportID}",
        produces = { "*/*" }, 
        consumes = { "*/*" },
        method = RequestMethod.POST)
    ResponseEntity<UFReport> getUltraFICOReport(@ApiParam(value = "Type of format to Accept. Only Accepting JSON" ,required=true, defaultValue="application/json") @RequestHeader(value="Accept", required=true) String accept
,@ApiParam(value = "Input request format" ,required=true, defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@NotNull @ApiParam(value = "Specifies the reason for retrieving this report. For example, if you need an Extension of Credit, then your Permissible Purpose Code would be EXT.", required = true, defaultValue = "PQL") @Valid @RequestParam(value = "permissiblePurposeCode", required = true, defaultValue="PQL") String permissiblePurposeCode
,@NotNull @ApiParam(value = "The market or industry you are in. For example if you sell insurance, then your Market Code would be INSR", required = true, defaultValue = "INST") @Valid @RequestParam(value = "marketCode", required = true, defaultValue="INST") String marketCode
,@ApiParam(value = "ID of Consumer to fetch",required=true) @PathVariable("consumerID") String consumerID
,@ApiParam(value = "ID of Report to fetch",required=true) @PathVariable("reportID") Integer reportID
,@ApiParam(value = "" ,required=true )  @Valid @RequestBody NullRequest body
,@ApiParam(value = "Input Transactional Services subcode assigned" , defaultValue="0.0") @RequestHeader(value="subcode", required=false) BigDecimal subcode
);

}

